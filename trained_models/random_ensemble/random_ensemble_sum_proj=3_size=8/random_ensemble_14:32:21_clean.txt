
Loading mnist.
('x_train shape:', (60000, 28, 28, 1), '\nx_test shape:', (10000, 28, 28, 1))

Computing random projections.
('Input shape: ', (60000, 28, 28, 1))
('Projected data shape:', (3, 60000, 8, 8, 1))
('\nTraining infos:\nbatch_size = ', 128, '\nepochs =', 12, '\nx_train.shape = ', (60000, 8, 8, 1), '\ny_train.shape = ', (60000, 10), '\n')
Epoch 1/12

469/468 [==============================] - 2s 5ms/step - loss: 0.8341 - acc: 0.7284
Epoch 2/12

469/468 [==============================] - 2s 5ms/step - loss: 0.4795 - acc: 0.8502
Epoch 3/12

469/468 [==============================] - 2s 5ms/step - loss: 0.4050 - acc: 0.8734
Epoch 4/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3659 - acc: 0.8847
Epoch 5/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3444 - acc: 0.8925
Epoch 6/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3257 - acc: 0.8988
Epoch 7/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3043 - acc: 0.9061
Epoch 8/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2961 - acc: 0.9078
Epoch 9/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2779 - acc: 0.9125
Epoch 10/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2684 - acc: 0.9152
Epoch 11/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2624 - acc: 0.9184
Epoch 12/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2550 - acc: 0.9187
('\nTraining infos:\nbatch_size = ', 128, '\nepochs =', 12, '\nx_train.shape = ', (60000, 8, 8, 1), '\ny_train.shape = ', (60000, 10), '\n')
Epoch 1/12

469/468 [==============================] - 2s 5ms/step - loss: 0.8191 - acc: 0.7349
Epoch 2/12

469/468 [==============================] - 2s 5ms/step - loss: 0.4717 - acc: 0.8513
Epoch 3/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3986 - acc: 0.8752
Epoch 4/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3636 - acc: 0.8866
Epoch 5/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3408 - acc: 0.8944
Epoch 6/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3175 - acc: 0.9011
Epoch 7/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3017 - acc: 0.9064
Epoch 8/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2955 - acc: 0.9081
Epoch 9/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2811 - acc: 0.9121
Epoch 10/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2675 - acc: 0.9159
Epoch 11/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2613 - acc: 0.9160
Epoch 12/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2524 - acc: 0.9196
('\nTraining infos:\nbatch_size = ', 128, '\nepochs =', 12, '\nx_train.shape = ', (60000, 8, 8, 1), '\ny_train.shape = ', (60000, 10), '\n')
Epoch 1/12

469/468 [==============================] - 3s 5ms/step - loss: 0.8132 - acc: 0.7354
Epoch 2/12

469/468 [==============================] - 2s 5ms/step - loss: 0.4630 - acc: 0.8560
Epoch 3/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3961 - acc: 0.8774
Epoch 4/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3594 - acc: 0.8891
Epoch 5/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3269 - acc: 0.9000
Epoch 6/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3166 - acc: 0.9033
Epoch 7/12

469/468 [==============================] - 2s 5ms/step - loss: 0.3000 - acc: 0.9072
Epoch 8/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2864 - acc: 0.9108
Epoch 9/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2796 - acc: 0.9131
Epoch 10/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2625 - acc: 0.9178
Epoch 11/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2676 - acc: 0.9166
Epoch 12/12

469/468 [==============================] - 2s 5ms/step - loss: 0.2553 - acc: 0.9213
('\nTesting infos:\nx_test.shape = ', (10000, 28, 28, 1), '\ny_test.shape = ', (10000, 10), '\n')

Computing random projections.
('Input shape: ', (10000, 28, 28, 1))
('Projected data shape:', (3, 10000, 8, 8, 1))

Computing random projections.
('Input shape: ', (10000, 28, 28, 1))
('Projected data shape:', (3, 10000, 8, 8, 1))
('Test evaluation on projection ', 123)
('\nTesting infos:\nx_test.shape = ', (10000, 8, 8, 1), '\ny_test.shape = ', (10000, 10), '\n')

Original test data.
Correctly classified: 9340
Incorrectly classified: 660
Test accuracy: 0.00%
              precision    recall  f1-score   support

           0       0.96      0.97      0.97       980
           1       0.98      0.98      0.98      1135
           2       0.93      0.94      0.93      1032
           3       0.93      0.92      0.92      1010
           4       0.90      0.96      0.93       982
           5       0.93      0.87      0.90       892
           6       0.94      0.95      0.95       958
           7       0.96      0.92      0.94      1028
           8       0.91      0.91      0.91       974
           9       0.91      0.90      0.90      1009

   micro avg       0.93      0.93      0.93     10000
   macro avg       0.93      0.93      0.93     10000
weighted avg       0.93      0.93      0.93     10000

('Test evaluation on projection ', 45)
('\nTesting infos:\nx_test.shape = ', (10000, 8, 8, 1), '\ny_test.shape = ', (10000, 10), '\n')

Original test data.
Correctly classified: 9334
Incorrectly classified: 666
Test accuracy: 0.00%
              precision    recall  f1-score   support

           0       0.96      0.96      0.96       980
           1       0.97      0.99      0.98      1135
           2       0.93      0.94      0.93      1032
           3       0.93      0.91      0.92      1010
           4       0.90      0.96      0.93       982
           5       0.91      0.91      0.91       892
           6       0.95      0.96      0.95       958
           7       0.92      0.93      0.93      1028
           8       0.93      0.88      0.90       974
           9       0.94      0.88      0.91      1009

   micro avg       0.93      0.93      0.93     10000
   macro avg       0.93      0.93      0.93     10000
weighted avg       0.93      0.93      0.93     10000

('Test evaluation on projection ', 180)
('\nTesting infos:\nx_test.shape = ', (10000, 8, 8, 1), '\ny_test.shape = ', (10000, 10), '\n')

Original test data.
Correctly classified: 9383
Incorrectly classified: 617
Test accuracy: 0.00%
              precision    recall  f1-score   support

           0       0.95      0.98      0.96       980
           1       0.98      0.98      0.98      1135
           2       0.95      0.91      0.93      1032
           3       0.93      0.91      0.92      1010
           4       0.94      0.94      0.94       982
           5       0.92      0.91      0.92       892
           6       0.96      0.95      0.95       958
           7       0.96      0.93      0.95      1028
           8       0.87      0.94      0.90       974
           9       0.92      0.92      0.92      1009

   micro avg       0.94      0.94      0.94     10000
   macro avg       0.94      0.94      0.94     10000
weighted avg       0.94      0.94      0.94     10000

('\nTesting infos:\nx_test.shape = ', (10000, 28, 28, 1), '\ny_test.shape = ', (10000, 10), '\n')

Computing random projections.
('Input shape: ', (10000, 28, 28, 1))
('Projected data shape:', (3, 10000, 8, 8, 1))

Original test data.
Correctly classified: 9605
Incorrectly classified: 395
Test accuracy: 0.00%
              precision    recall  f1-score   support

           0       0.97      0.99      0.98       980
           1       0.98      0.99      0.99      1135
           2       0.96      0.95      0.96      1032
           3       0.96      0.95      0.96      1010
           4       0.94      0.98      0.96       982
           5       0.96      0.94      0.95       892
           6       0.97      0.97      0.97       958
           7       0.97      0.95      0.96      1028
           8       0.94      0.95      0.95       974
           9       0.95      0.93      0.94      1009

   micro avg       0.96      0.96      0.96     10000
   macro avg       0.96      0.96      0.96     10000
weighted avg       0.96      0.96      0.96     10000

('\nAdversarial evaluation using', 'fgsm', 'method.')
(10000, 10000)

Computing random projections.
('Input shape: ', (10000, 28, 28, 1))
('Projected data shape:', (3, 10000, 8, 8, 1))

Adversarial test data.
Correctly classified: 5012
Incorrectly classified: 4988
Adversarial accuracy: 0.00%
              precision    recall  f1-score   support

           0       0.80      0.69      0.74       980
           1       0.91      0.04      0.07      1135
           2       0.54      0.68      0.60      1032
           3       0.46      0.72      0.56      1010
           4       0.62      0.52      0.56       982
           5       0.57      0.55      0.56       892
           6       0.78      0.63      0.69       958
           7       0.86      0.21      0.34      1028
           8       0.27      0.82      0.41       974
           9       0.44      0.25      0.32      1009

   micro avg       0.50      0.50      0.50     10000
   macro avg       0.62      0.51      0.49     10000
weighted avg       0.63      0.50      0.48     10000

